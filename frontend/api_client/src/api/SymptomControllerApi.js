/**
 * Api Documentation
 * Api Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import SymptomDTO from '../model/SymptomDTO';

/**
* SymptomController service.
* @module api/SymptomControllerApi
* @version 1.0
*/
export default class SymptomControllerApi {

    /**
    * Constructs a new SymptomControllerApi. 
    * @alias module:api/SymptomControllerApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the findSymptomsUsingGET operation.
     * @callback module:api/SymptomControllerApi~findSymptomsUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SymptomDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Responds with a list of symptoms
     * @param {Object} opts Optional parameters
     * @param {String} opts.search The name of the symptom (or part of it) that should be searched
     * @param {module:api/SymptomControllerApi~findSymptomsUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SymptomDTO}
     */
    findSymptomsUsingGET(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'search': opts['search']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = SymptomDTO;
      return this.apiClient.callApi(
        '/api/symptoms', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the findUserUsingGET operation.
     * @callback module:api/SymptomControllerApi~findUserUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SymptomDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Responds with a symptom object
     * @param {Number} id id
     * @param {module:api/SymptomControllerApi~findUserUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SymptomDTO}
     */
    findUserUsingGET(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling findUserUsingGET");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = SymptomDTO;
      return this.apiClient.callApi(
        '/api/symptoms/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the saveSymptomUsingPOST operation.
     * @callback module:api/SymptomControllerApi~saveSymptomUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SymptomDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Saves new Symptom object
     * @param {module:model/SymptomDTO} newSymptomDTO newSymptomDTO
     * @param {module:api/SymptomControllerApi~saveSymptomUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SymptomDTO}
     */
    saveSymptomUsingPOST(newSymptomDTO, callback) {
      let postBody = newSymptomDTO;
      // verify the required parameter 'newSymptomDTO' is set
      if (newSymptomDTO === undefined || newSymptomDTO === null) {
        throw new Error("Missing the required parameter 'newSymptomDTO' when calling saveSymptomUsingPOST");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = SymptomDTO;
      return this.apiClient.callApi(
        '/api/symptoms', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
