/**
 * Api Documentation
 * Api Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ExaminationDTO from '../model/ExaminationDTO';

/**
* ExaminationController service.
* @module api/ExaminationControllerApi
* @version 1.0
*/
export default class ExaminationControllerApi {

    /**
    * Constructs a new ExaminationControllerApi. 
    * @alias module:api/ExaminationControllerApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the findExaminationUsingGET operation.
     * @callback module:api/ExaminationControllerApi~findExaminationUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExaminationDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Responds with an examination object
     * @param {Number} id id
     * @param {module:api/ExaminationControllerApi~findExaminationUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExaminationDTO}
     */
    findExaminationUsingGET(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling findExaminationUsingGET");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = ExaminationDTO;
      return this.apiClient.callApi(
        '/api/examinations/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the findExaminationsUsingGET operation.
     * @callback module:api/ExaminationControllerApi~findExaminationsUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExaminationDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Responds with a list of examinations
     * @param {Object} opts Optional parameters
     * @param {Array.<Number>} opts.containssymptoms A comma seperated list of symptom ids that should be searched for
     * @param {module:api/ExaminationControllerApi~findExaminationsUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExaminationDTO}
     */
    findExaminationsUsingGET(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'containssymptoms': this.apiClient.buildCollectionParam(opts['containssymptoms'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = ExaminationDTO;
      return this.apiClient.callApi(
        '/api/examinations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the saveExaminationUsingPOST operation.
     * @callback module:api/ExaminationControllerApi~saveExaminationUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExaminationDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Saves new Examination object
     * @param {module:model/ExaminationDTO} newExaminationDTO newExaminationDTO
     * @param {module:api/ExaminationControllerApi~saveExaminationUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExaminationDTO}
     */
    saveExaminationUsingPOST(newExaminationDTO, callback) {
      let postBody = newExaminationDTO;
      // verify the required parameter 'newExaminationDTO' is set
      if (newExaminationDTO === undefined || newExaminationDTO === null) {
        throw new Error("Missing the required parameter 'newExaminationDTO' when calling saveExaminationUsingPOST");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = ExaminationDTO;
      return this.apiClient.callApi(
        '/api/examinations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
