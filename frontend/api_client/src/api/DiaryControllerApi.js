/**
 * Api Documentation
 * Api Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Diary from '../model/Diary';
import DiaryDTO from '../model/DiaryDTO';

/**
* DiaryController service.
* @module api/DiaryControllerApi
* @version 1.0
*/
export default class DiaryControllerApi {

    /**
    * Constructs a new DiaryControllerApi. 
    * @alias module:api/DiaryControllerApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteDiaryUsingDELETE operation.
     * @callback module:api/DiaryControllerApi~deleteDiaryUsingDELETECallback
     * @param {String} error Error message, if any.
     * @param {module:model/Diary} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes diary object
     * @param {Number} id id
     * @param {module:api/DiaryControllerApi~deleteDiaryUsingDELETECallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Diary}
     */
    deleteDiaryUsingDELETE(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteDiaryUsingDELETE");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Diary;
      return this.apiClient.callApi(
        '/api/diaries/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the findDiariesUsingGET operation.
     * @callback module:api/DiaryControllerApi~findDiariesUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Diary} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Responds with a list of diaries
     * @param {module:api/DiaryControllerApi~findDiariesUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Diary}
     */
    findDiariesUsingGET(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Diary;
      return this.apiClient.callApi(
        '/api/diaries', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the findDiaryUsingGET operation.
     * @callback module:api/DiaryControllerApi~findDiaryUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Diary} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Responds with a diary object
     * @param {Number} id id
     * @param {module:api/DiaryControllerApi~findDiaryUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Diary}
     */
    findDiaryUsingGET(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling findDiaryUsingGET");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Diary;
      return this.apiClient.callApi(
        '/api/diaries/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the saveDiaryUsingPOST operation.
     * @callback module:api/DiaryControllerApi~saveDiaryUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Diary} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Saves new diary object
     * @param {module:model/DiaryDTO} diaryDTO diaryDTO
     * @param {module:api/DiaryControllerApi~saveDiaryUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Diary}
     */
    saveDiaryUsingPOST(diaryDTO, callback) {
      let postBody = diaryDTO;
      // verify the required parameter 'diaryDTO' is set
      if (diaryDTO === undefined || diaryDTO === null) {
        throw new Error("Missing the required parameter 'diaryDTO' when calling saveDiaryUsingPOST");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = Diary;
      return this.apiClient.callApi(
        '/api/diaries/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateDiaryUsingPUT operation.
     * @callback module:api/DiaryControllerApi~updateDiaryUsingPUTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Diary} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a diary object
     * @param {Number} id id
     * @param {module:model/DiaryDTO} diaryDTO diaryDTO
     * @param {module:api/DiaryControllerApi~updateDiaryUsingPUTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Diary}
     */
    updateDiaryUsingPUT(id, diaryDTO, callback) {
      let postBody = diaryDTO;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateDiaryUsingPUT");
      }
      // verify the required parameter 'diaryDTO' is set
      if (diaryDTO === undefined || diaryDTO === null) {
        throw new Error("Missing the required parameter 'diaryDTO' when calling updateDiaryUsingPUT");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = Diary;
      return this.apiClient.callApi(
        '/api/diaries/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
